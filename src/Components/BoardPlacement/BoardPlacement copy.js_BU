import React, { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Board from '../Board/Board';
import MainActionBar from '../MainActionBar/MainActionBar';
import ShipSelector from '../ShipSelector/ShipSelector';
import Ship from '../../game/ship/ship';
import Ship0Selector from '../../Assets/Images/selection_0.png';
import Ship1Selector from '../../Assets/Images/selection_1.png';
import Ship2Selector from '../../Assets/Images/selection_2.png';
import Ship3Selector from '../../Assets/Images/selection_3.png';

const useStyles = makeStyles(() => ({
  root: {
    padding: 0,
    margin: 0,
    width: '100%',
    height: '100%',
  },
  paper: {
    padding: 0,
    margin: 0,
    backgroundColor: 'rgba(255,255,255,0.8)',
  },
}));

const BoardPlacement = props => {
  const classes = useStyles();
  const [isStillPlacing, setIsStillPlacing] = useState(true);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [shipItems, setShipItems] = useState([
    { id: 0, ship: Ship0Selector, size: 5, enabled: true },
    { id: 1, ship: Ship1Selector, size: 4, enabled: true },
    { id: 2, ship: Ship2Selector, size: 3, enabled: true },
    { id: 3, ship: Ship3Selector, size: 2, enabled: true },
  ]);
  const [placementStates, setPlacementStates] = useState({
    isStillPlacing: true,
    selectedIndex: 0,
  });

  const { gameboards, setGameboards } = props;

  // See which ships are available to select for
  //    ship placement
  const findAvailableShips = () => {
    for (let i = 0; i < shipItems.length; i += 1) {
      if (shipItems[i].enabled === true) {
        return shipItems[i].id;
      }
    }
    return -1;
  };

  const handleBoardClick = e => {
    if (isStillPlacing) {
      const x = parseInt(e.currentTarget.value.split(' ')[0], 10);
      const y = parseInt(e.currentTarget.value.split(' ')[1], 10);
      const playerGameboard = gameboards[0];
      const newShip = Ship(
        selectedIndex,
        shipItems[selectedIndex].size,
        [],
        false,
        'vertical',
      );
      // ADD A CHECK HERE TO SEE IF ALL SHIPS HAVE BEEN PLACED
      if (playerGameboard.isLegalPlacement(newShip, [x, y])) {
        playerGameboard.placeShip(newShip, [x, y]);
        // Disable the ship placement button

        // Update the ship template
        setShipItems(prevState => {
          console.log(prevState);
          // const tempShips = [...prevState];
          // tempShips[selectedIndex].enabled = false;
          // console.log(tempShips);
          prevState[selectedIndex].enabled = false;
          // return tempShips;
          return prevState;
        });
        const availableShipID = findAvailableShips();
        if (availableShipID === -1) {
          setSelectedIndex(prevState => {
            return -1;
          });
          setIsStillPlacing(prevState => {
            return false;
          });
        } else {
          setSelectedIndex(prevState => {
            return availableShipID;
          });
        }
        console.log(selectedIndex);
        // Update gameboards with new ship
        setGameboards(prevState => {
          const tempGameboards = [...prevState];
          tempGameboards[0] = { ...playerGameboard };
          return tempGameboards;
        });
      }
    }
  };

  const createComputerShips = () => {
    for (let i = 0; i < 4; i += 1) {
      const newShip = Ship(0, 4, [], false, 'vertical');
    }
  };

  const handleSelection = id => {
    setSelectedIndex(id);
  };

  return (
    <div>
      <Paper>
        <Board
          type="placement"
          grid={gameboards[0].grid}
          handleBoardClick={handleBoardClick}
        />
      </Paper>
      <MainActionBar buttonText="Play" handleClick={props.startGameplay} />
      <ShipSelector
        shipItems={shipItems}
        handleSelection={handleSelection}
        selectedIndex={selectedIndex}
      />
    </div>
  );
};

export default BoardPlacement;
